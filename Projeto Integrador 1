import numpy as numpy
import pyodbc as pyodbc

dados_conexao = (
    "Driver={SQL Server};"
    "Server=EudineiJunior;"
    "Database=PucProject;"
)

conexao = pyodbc.connect(dados_conexao)
print("Conexão Bem Sucedida")

cursor = conexao.cursor()

def equivalenteDecimal(letra):
    # definindo uma cadeia de caracteres com todas as letras do alfabeto
    alfabeto = "zabcdefghijklmnopqrstuvwxy"

    # encontra a posição da letra na string e a retorna
    return (alfabeto.find(letra))


def equivalenteAlfabetico(numero):
    # definindo uma cadeia de caracteres com todas as letras do alfabeto
    alfabeto = "zabcdefghijklmnopqrstuvwxy"

    # encontra o pedaço da string a qual o número correspondente indica
    return (alfabeto[numero])


def cifraHill(texto, chave):
    # inicializa a variável que vai receber a mensagem codificada
    codigo = ""
    # criando uma matriz responsável por receber o valor númerico equivalente ao alfabético
    valorNumerico = numpy.empty([2, 1], dtype=int)
    # as inicializações indicam que ela será um vetor-coluna do tipo inteiro

    # criando uma matriz responsável por receber o valor codificado equivalente ao alfabético
    valorCodificado = numpy.empty([2, 1], dtype=int)
    # as inicializações indicam que ela será um vetor-coluna do tipo inteiro

    # estrutura de repetição for responsável para codificar cada par do texto formado
    for indice in range(0, len(texto)):

        # estrutura de seleção if responsável por adicionar o valor numérico para a primeira letra do par
        if (indice == 0 or indice % 2 == 0):
            # pega exatamente a letra localizada no elemento numerico de 'indice'
            valor = equivalenteDecimal(texto[indice])
            # adiciona na primeira linha da primeira coluna
            valorNumerico[0][0] = valor

            # estrutura de seleção responsável por adicionar o valor numérico para a segunda letra do par
        if (indice != 0 and indice % 2 != 0):
            # pega exatamente a letra localizada no elemento numerico de 'indice'
            valor = equivalenteDecimal(texto[indice])
            # adiciona na segunda linha da primeira coluna
            valorNumerico[1][0] = valor

            # estrutura de seleção responsável por calcular a multiplicação da matriz A pelo vetor-coluna
        # dos pares numéricos
        if (indice != 0 and indice % 2 != 0):
            # realiza a multiplicação da matriz A com os pares de números equivalentes a letras
            valorCodificado = numpy.dot(chave, valorNumerico)

            # caso o valor do resultado codificado no primeiro par da letra seja maior que 25,
            # substitui pelo valor
            # do seu módulo por 26
            if (valorCodificado[0][0] > 25):
                valorCodificado[0][0] = (valorCodificado[0][0] % 26)

            # caso o valor do resultado codificado no segundo par da letra seja maior que 25,
            # substitui pelo valor
            # do seu módulo por 26
            if (valorCodificado[1][0] > 25):
                valorCodificado[1][0] = (valorCodificado[1][0] % 26)

            # pega o equivalente alfabético para os novos números codificados, visando
            # construir a frase codificada
            a = str(equivalenteAlfabetico(valorCodificado[0][0]))  # primeira linha do vetor-coluna
            b = str(equivalenteAlfabetico(valorCodificado[1][0]))  # segunda linha do vetor-coluna

            # adiciona letra por letra codificada a uma variável string para montar a frase
            codigo += a
            codigo += b

    # remove os caracteres desnecessários e mostra somente a parte codificada
    codigo = codigo[len(codigo) - len(texto): len(codigo)]

    # função retorna código
    arq = open('registrados.txt', 'a')
    arq.write('{}\n'.format(codigo))
    comando = f"""INSERT INTO USUARIO(email)
            VALUES
                ('{codigo}')"""

    cursor.execute(comando)
    cursor.commit()
    return codigo


def inserirFrase():
    texto = ""  # inicializando uma variável vazia
    texto = str(input("digite o seu e-mail: "))  # padrão de entrada para receber uma string
    texto = texto.replace(" ", "")  # eliminando os espaços em branco do texto
    texto = texto.lower()  # deixando toda a string com letras minúsculas

    # caso o texto tenha uma quantidade ímpar de letras, adiciona mais uma letra arbitrária ao final
    if (len(texto) % 2 != 0):
        texto += "g"  # adiciona-se g, por exemplo

    return texto  # retorna a frase pronta para o sistema de criptografia


def descriptografar():
    A = numpy.array([[5, 6], [2, 3]])

    texto = inserirFrase()
    cifraHill(texto, A)
    A = numpy.array([[5, 6], [2, 3]])
    # calculando o resíduo (ad - bc)
    residuo = (A[0][0] * A[1][1] - A[0][1] * A[1][0]) % 26
    reciproco = 9
    # definindo o posicionamento da matriz invertível (mod 26)
    descriptografia = numpy.array([[A[1][1], -A[0][1]], [-A[1][0], A[0][0]]])
    # realizando a multiplicação com o recíproco
    descriptografia *= reciproco
    # definindo o módulo 26 de cada elemento
    descriptografia %= 26


arq = open('registrados.txt', 'a')
print('Olá, aqui você pode adicionar uma nova conta!')
print('='*60)
criarconta = input('você ja possui uma conta? (digite S(sim) ou N(não): ').upper()
if criarconta == 'N':

    email_usuario = descriptografar()

    nome_usuario = input('Digite o nome de usuário: ')

    arq.write('{}\n'.format(nome_usuario))

    senha_usuario = input(f'Digite a senha do usuario {nome_usuario}: ')

    arq.write('{}\n'.format(senha_usuario))
    comando = f"""INSERT INTO USUARIO(nome, senha)
            VALUES
                ('{nome_usuario}', '{senha_usuario}')"""
    cursor.execute(comando)
    cursor.commit()
    print('Cadastro realizado com sucesso!\n')
    arq.close()  # O arquivo é fechado do modo de adição para ser aberto
    # posteriormente no modo de leitura
    arq = open('registrados.txt')  # abrindo no modo de leitura
    print('Efetue o seu login\n')
    nome_login = input('\nDigite o seu nome de usuario: ')
    A = numpy.array([[5, 6], [2, 3]])
    emailcheck = inserirFrase()
    email_usuario = cifraHill(emailcheck, A)
    senha_usuario = input('\nDigite a senha do usuário: ')

    registrados = arq.readlines()
    if nome_login + '\n' in registrados and email_usuario + '\n' in registrados and senha_usuario + '\n' in registrados:
        print('Bem vindo, {}!'.format(nome_login))
    else:
        print('Você deve ter digitado seu nome de usuario errado, por favor verifique.')
        quit()
    arq.close()
    print('Cadastro realizado com sucesso!\n')
    arq.close()  # O arquivo é fechado do modo de adição para ser aberto
# posteriormente no modo de leitura
else:
    arq = open('registrados.txt')  # abrindo no modo de leitura
    print('Efetue o seu login')
    nome_login = input('Digite o seu nome de usuario: ')
    A = numpy.array([[5, 6], [2, 3]])
    emailcheck = inserirFrase()
    email_usuario = cifraHill(emailcheck, A)
    senha_usuario = input('Digite a senha do usuário: ')

    registrados = arq.readlines()
    if nome_login + '\n' in registrados and email_usuario + '\n' in registrados and senha_usuario + '\n' in registrados:
        print('Bem vindo, {}!'.format(nome_login))
    else:
        print('Você deve ter digitado seu nome de usuario errado, por favor verifique.')
        quit()
    arq.close()

# Pergunte se deseja imprimir IMC, TMB ou sair
continuar = False
tmb = "vazio"
while not continuar:
    saida = str(input('Calcule o IMC,TMB,DR(Divisão de refeições) (digite quit para sair do programa): ')).upper()

    if saida == 'QUIT':
        continuar = True
        print('Obrigado por usar nosso Programa.')

    # imc
    if saida == 'IMC':
        altura = float(input("Digite sua altura em metros: "))
        peso = float(input("Digite seu peso em Kg: "))
        comando = f"""INSERT INTO CONTENT(altura, peso)
        VALUES
            ({altura}, {peso})"""
        cursor.execute(comando)
        cursor.commit()

        # calculo do IMC
        IMC = peso / altura ** 2
        comando = f"""INSERT INTO CONTENT(imc)
        VALUES
             ({IMC})"""
        cursor.execute(comando)
        cursor.commit()

        if IMC < 18.5:
            texto = "Abaixo do Peso"

        elif IMC <= 24.9:
            texto = 'Ideal'

        elif IMC <= 29.9:
            texto = 'Excesso de Peso'

        elif IMC <= 39.9:
            texto = 'Obeso'

        else:
            texto = 'Extremamente Obeso'

        print('Seu IMC é: ', IMC )
        print('isso é: ', texto)

    # TMB
    if saida == 'TMB':
        genero = str(input('Você é homem (M) ou mulher (F):')).upper()
        idade = int(input('Digite sua idade em numeros:'))
        altura = int(input('Digite sua altura em cm: '))
        peso = int(input('Insira seu peso em kg: '))
        comando = f"""INSERT INTquitO USUARIO(idade, genero)
                VALUES
                    ({idade}, '{genero}')"""
        cursor.execute(comando)
        cursor.commit()
        if genero == 'M':
            # descobrir a tmb homem
            tmb = 66 + (6.2 * peso) + (12.7 * altura) - (6.76 * idade)
            tmb = round(tmb)
            print('Sua taxa metabolica basal é %.3f' % tmb)
            comando = f"""INSERT INTO CONTENT(tmb)
                     VALUES
                         ({tmb})"""
            cursor.execute(comando)
            cursor.commit()

        elif genero == 'F':
            # descobrir a tmb mulher
            tmb = 655 + (4.35 * peso) + (4.7 * altura) - (4.7 * idade)
            tmb = round(tmb)
            print('Sua taxa metabolica basal é %.3f' % tmb)
            comando = f"""INSERT INTO CONTENT(tmb)
                     VALUES
                         ({tmb})"""
            cursor.execute(comando)
            cursor.commit()

    # DR (divisão de refeições)
    if saida == 'DR':
        if tmb == 'vazio':
            print('calcule o seu tmb primeiro')
        else:
            print("divisão das refeições (digite 'QUIT' a qualquer momento para parar a ação ")

            cafe = 0
            almoco = 0
            lanche = 0
            janta = 0
            seia = 0
            continuardr = False

            while not continuardr:
                refeicao = str(input(
                    "qual refeição você quer adicionar? \ndigite C(café da manha), A(almoço), L(lanche), J(janta) ou S(seia) (digite quit para parar a ação): ")).upper()
                if refeicao == "C":
                    cafe = float(input("quantos kcal você ingeriu no seu cafe: "))
                elif refeicao == "A":
                    almoco = float(input("quantos kcal você ingeriu no seu almoço: "))
                elif refeicao == "L":
                    lanche = float(input("quantos kcal você ingeriu no seu lanche: "))
                elif refeicao == "J":
                    janta = float(input("quantos kcal você ingeriu na sua janta: "))
                elif refeicao == "S":
                    seia = float(input("quantos kcal você ingeriu na sua seia: "))
                elif refeicao == "QUIT":
                    continuardr = True

            kcaldia = cafe + almoco + lanche + janta + seia

            if kcaldia >= tmb:
                print("você ingeriu calorias o suficiente")
            else:
                print("voce não ingeriu calorias o suficiente")
